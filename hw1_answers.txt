HW#1
1 – Why we need to use OOP ? Some major OOP languages ?

OOP helps in code reusability, maintainability and organization using objects and classes.
Major OOP languages: Java, C++, Python, C#, Ruby.

2 – Interface vs Abstract class ?

Interface: Only method signatures (no implementation, except default methods in Java 8+).
Abstract Class: Can have both abstract methods and concrete methods.
When to use? Interface for defining behavior across unrelated classes, abstract class for shared behavior in a class hierarchy.


3 – Why wee need equals and hashcode ? When to override ?

Used to compare object equality and enable correct hashing.
Override when creating custom objects that need to be compared logically.

4 – Diamond problem in Java ? How to fix it?

Occurs in multiple inheritance when a class inherits from two interfaces with the same method.
Fixed using default methods in interfaces or avoiding multiple inheritance of implementations.

5 – Why we need Garbage Collector ? How does it run ?

Frees memory by removing unused objects to prevent memory leaks.
Runs automatically but can be triggered with System.gc().

6 – Java ‘static’ keyword usage ?

Used for class-level variables, methods, blocks, and nested classes.
Belongs to the class, not instances.

7 – Immutability means ? Where, How and Why to use it ?

An immutable object cannot be modified after creation.
Used in String, Wrapper classes, and custom immutable objects for thread safety and caching.
Achieved using final fields and no setters.

8 – Composition and Aggregation means and differences ?

Composition: Strong association (contained object cannot exist without the container).
Aggregation: Weak association (contained object can exist independently).

9 – Cohesion and Coupling means and differences ?

Cohesion: How well a class’s methods relate to its purpose.
Coupling: Dependency between classes.

10 - Heap and Stack means and differences ?

Heap: Stores objects, shared among threads, managed by GC.
Stack: Stores method calls and local variables, thread-specific, auto-cleared.

11 – Exception means ? Type of Exceptions ?

Exception: An event disrupting program execution.
Checked: Must be handled (e.g., IOException).
Unchecked: Runtime errors (e.g., NullPointerException).

12 – How to summarize ‘clean code’ as short as possible ?

Simple, readable, maintainable, and follows best practices.

13 - What is the method of hiding in Java ?

When a subclass defines a static method with the same signature as a static method in the parent class.
Unlike method overriding, the method call depends on the reference type.

14 - What is the difference between abstraction and polymorphism in Java ?

Abstraction: Hides implementation details using abstract classes or interfaces.
Polymorphism: Allows methods to behave differently based on the object type (method overriding/overloading).